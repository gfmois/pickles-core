<?php

namespace Pickles\Routing;

use Closure;
use Pickles\Container\DependencyInjection;
use Pickles\Http\Middleware;
use Pickles\Http\HttpMethod;
use Pickles\Http\Exceptions\HttpNotFoundException;
use Pickles\Http\Request;
use Pickles\Http\Response;
use Pickles\Routing\Route;

/**
 * Class Router
 *
 * A simple HTTP router that maps URIs and HTTP methods to handlers.
 * Supports typical RESTful HTTP methods and route resolution.
 *
 * @package Pickles\Routing
 */
class Router
{
    /**
     * The registered HTTP routes, organized by HTTP method.
     *
     * @var array<string, Route[]> An associative array where each key is an HTTP method name (e.g. "GET")
     *                              and the value is an array of Route objects for that method.
     */
    protected array $routes = [];

    /**
     * Router constructor.
     *
     * Initializes the routes array for each available HTTP method.
     */
    public function __construct()
    {
        foreach (HttpMethod::cases() as $method) {
            $this->routes[$method->value] = [];
        }
    }

    /**
     * Registers a new route for a specific HTTP method.
     *
     * @param HttpMethod $method The HTTP method (GET, POST, etc.)
     * @param string $uri The route URI (e.g. "/users")
     * @param Closure $action The handler to be executed for this route
     * @return Route
     */
    protected function registerRoute(HttpMethod $method, string $uri, Closure|array $action): Route
    {
        $route = new Route($uri, $action);
        $this->routes[$method->value][] = $route;
        return $route;
    }

    /**
     * Registers a GET route.
     *
     * @param string $uri
     * @param Closure|array $action
     * @return Route
     */
    public function get(string $uri, Closure|array $action): Route
    {
        return $this->registerRoute(HttpMethod::GET, $uri, $action);
    }

    /**
     * Registers a POST route.
     *
     * @param string $uri
     * @param Closure|array $action
     * @return Route
     */
    public function post(string $uri, Closure|array $action)
    {
        return $this->registerRoute(HttpMethod::POST, $uri, $action);
    }

    /**
     * Registers a PUT route.
     *
     * @param string $uri
     * @param Closure|array $action
     * @return Route
     */
    public function put(string $uri, Closure|array $action)
    {
        return $this->registerRoute(HttpMethod::PUT, $uri, $action);
    }

    /**
     * Registers a PATCH route.
     *
     * @param string $uri
     * @param Closure|array $action
     * @return Route
     */
    public function patch(string $uri, Closure|array $action)
    {
        return $this->registerRoute(HttpMethod::PATCH, $uri, $action);
    }

    /**
     * Registers a DELETE route.
     *
     * @param string $uri
     * @param Closure|array $action
     * @return Route
     */
    public function delete(string $uri, Closure|array $action)
    {
        return $this->registerRoute(HttpMethod::DELETE, $uri, $action);
    }

    /**
     * Resolves a request to a matching route.
     *
     * @param Request $request The HTTP request instance.
     * @return Route The matched route instance.
     *
     * @throws HttpNotFoundException If no matching route is found for the request.
     */
    public function resolveRoute(Request $request): Route
    {
        foreach ($this->routes[$request->method()->value] as $route) {
            if ($route->matches($request->uri())) {
                return $route;
            }
        }

        throw new HttpNotFoundException();
    }

    /**
     * Resolves the given request to a corresponding route and executes the route's action.
     *
     * @param Request $request The incoming HTTP request to be resolved.
     * @return Response The HTTP response generated by the resolved route's action.
     * @throws HttpNotFoundException If the resolved route's action is not a valid Closure.
     */
    public function resolve(Request $request): Response
    {
        $route = $this->resolveRoute($request);
        $request->setRoute($route);
        $action = $route->getAction();
        if (!$action instanceof Closure && !is_array($action)) {
            throw new HttpNotFoundException();
        }

        if (is_array($action)) {
            $controller = new $action[0]();
            $action[0] = $controller;
        }

        $params = DependencyInjection::resolveParameters($action, $request->routeParams());

        return $this->execMiddlewares(
            $request,
            $route->getMiddlewares(),
            fn () => call_user_func($action, ...$params)
        );
    }

    /**
     * Executes all middlewares before launch the handler
     *
     * @param Middleware[] $middlewares
     * @param \Closure|array $target
     * @return Response
     */
    protected function execMiddlewares(Request $request, array $middlewares, Closure|array $target): Response
    {
        if (count($middlewares) == 0) {
            return $target($request);
        }

        return $middlewares[0]->handle(
            $request,
            fn (Request $request) => $this->execMiddlewares(
                $request,
                array_slice(
                    $middlewares,
                    1
                ),
                $target
            )
        );
    }
}
