<?php

/**
 * Class PicklesEngine
 *
 * This class is an implementation of the `Engine` interface for rendering PHP views within the Pickles framework.
 * It supports dynamic view rendering with optional layout wrapping and content annotation replacement.
 *
 * The engine looks for `.php` files inside a specified views directory, and injects rendered view content into
 * a layout template by replacing a predefined annotation (e.g., "@content").
 */

namespace Pickles\View;

use Pickles\View\Engine;

class PicklesEngine implements Engine
{
    /**
     * The base directory path where view files are stored.
     *
     * This path is used to locate both the layout and individual view PHP files.
     * It can be absolute or relative, depending on the application context.
     *
     * @var string
     */
    protected string $viewsDir;

    /**
     * The default layout name used when no layout is explicitly provided.
     *
     * The layout is expected to be located in the `layouts` subdirectory within the views directory,
     * and the corresponding file should have a `.php` extension (e.g., "main.php").
     *
     * @var string
     */
    protected string $defaultLayout = "main";

    /**
     * Annotation string used as a placeholder in the layout to inject rendered view content.
     *
     * When rendering, this placeholder in the layout file is replaced by the output of the view.
     * By default, it is set to "@content", but it can be customized if needed.
     *
     * @var string
     */
    protected string $contentAnnotation = "@content";

    public function __construct(string $viewsDir)
    {
        $this->viewsDir = $viewsDir;
    }

    /**
     * Renders a view within an optional layout.
     *
     * The specified view is rendered using the given parameters, and its content
     * is injected into a layout template by replacing the configured content annotation.
     *
     * @param string      $view   The name of the view file (without .php extension).
     * @param array       $params Associative array of variables to extract into the view scope.
     * @param string|null $layout Optional layout name. If null, the default layout is used.
     *
     * @return string The final rendered output with the view embedded in the layout.
     *
     * @throws FileNotFoundException If the view file does not exist or the name is empty.
     */
    public function render(string $view, array $params = [], ?string $layout = null): string
    {
        $this->validateViewFile($this->viewsDir, $view);

        $layoutContent = $this->renderLayout($layout ?? $this->defaultLayout);
        $viewContent = $this->renderView($view, $params);

        return str_replace($this->contentAnnotation, $viewContent, $layoutContent);
    }

    /**
     * Renders the specified layout file and returns its output.
     *
     * This method locates the layout file within the `layouts/` directory under the views directory
     * and includes it using output buffering.
     *
     * @param string $layout The name of the layout file (without .php extension).
     *
     * @return string The rendered layout output as a string.
     */
    protected function renderLayout(string $layout): string
    {
        return $this->getPhpFileOutput("{$this->viewsDir}/layouts/{$layout}.php");
    }

    /**
     * Renders the specified view file with the provided parameters.
     *
     * The parameters are extracted as local variables available to the view file.
     *
     * @param string $view   The name of the view file (without .php extension).
     * @param array  $params Associative array of variables to extract into the view scope.
     *
     * @return string The rendered view output.
     */
    protected function renderView(string $view, array $params = []): string
    {
        return $this->getPhpFileOutput("{$this->viewsDir}/{$view}.php", $params);
    }

    /**
     * Includes a PHP file with optional parameters and returns its output as a string.
     *
     * Parameters are extracted into the local scope before including the file.
     * Output buffering is used to capture the rendered result.
     *
     * @param string $phpFile Full path to the PHP file to include.
     * @param array  $params  Optional associative array of variables to make available in the file.
     *
     * @return string The output generated by the PHP file.
     */
    protected function getPhpFileOutput(string $phpFile, array $params = []): string
    {
        foreach ($params as $param => $value) {
            $$param = $value;
        }

        ob_start();
        include_once $phpFile;
        return ob_get_clean();
    }

    /**
     * Validates that the specified view file exists and is not an empty string.
     *
     * Throws an exception if the file does not exist or if the view name is empty.
     *
     * @param string $viewsDir Base directory where views are located.
     * @param string $view     Name of the view file (without .php extension).
     *
     * @throws FileNotFoundException If the file is not found or the view name is empty.
     */
    private function validateViewFile(string $viewsDir, string $view): void
    {
        $phpFile = "{$viewsDir}/{$view}.php";
        if (!file_exists($phpFile)) {
            throw new FileNotFoundException("File {$view}.php not found on {$viewsDir} directory.");
        }

        if (empty($view)) {
            throw new FileNotFoundException("Empty string passed to be render.");
        }
    }

    /**
     * Sets the name of the default layout used when none is provided during rendering.
     *
     * @param string $defaultLayout The new default layout name (without .php extension).
     *
     * @return self Returns the current instance for method chaining.
     */
    public function setDefaultLayout($defaultLayout)
    {
        $this->defaultLayout = $defaultLayout;

        return $this;
    }

    /**
     * Sets the directory where view and layout files are located.
     *
     * @param string $viewsDir Absolute or relative path to the views directory.
     *
     * @return self Returns the current instance for method chaining.
     */
    public function setViewsDir($viewsDir)
    {
        $this->viewsDir = $viewsDir;

        return $this;
    }
}
